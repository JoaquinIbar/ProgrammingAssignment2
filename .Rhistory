library(swirl)
swirl()
setwd("testdir")
file.create("mytest.R")
ls.diag()
ls()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename(mytest.R, mytest2.R)
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mttest3.R")
file.path("mytest3.R")
file.path("mytest3.R", "folder1", "folder2")
file.path(folder1", "folder2")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2", file.path("testdir2", "testdir3"), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,10, by = 0.5)
seq(0,10, by = 0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5, 55,-10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
my_char
paste(my_char)
paste(my_char, collapse = " ")
my_name <- "Joaco"
c(my_char, my_name)
my_name
paste(my_char, collapse = " ")
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), collapse = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[C(5)]
x[3]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patiens <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
colnames(my_data) <- cnames
my_data
swirl()
library(swirl)
swirl
swirl()
TRUE == TRUE
(FALSE==TRUE) == FALSE
6 == 7
6<7
10 <= 10
5 != 7
!(5=7)
!(5==7)
FALSE & FALSE
TRUE & c(T,F,F)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints z<- sample(10)
ints <- sample(10)
ints
ints >5
which(ints > 7)
any(ints <  0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
sumbit()
submit()
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
submit()
evaluate(deviance, c(1.4, 3.6, 7.9, 8.8))
evaluate(stderr, c(1.4, 3.6, 7.9, 8.8))
evaluate("sd", c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
v
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[0], 6)
evaluate(function(x){x[0], c(8,40))
evaluate(function(x){x[0]}, c(8,40))
evaluate(function(x){x[1]}, c(8,40))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("asdsa")
submit()
mad_libs("Argentina", "FEO", "alto")
submit()
'I' %p% 'love' %p% 'R!'
library(datasets)
data("iris")
?irir
?iris
View(irir)
View(iris)
View(iris[iris$Species=virginica])
View(iris[iris$Species="virginica"])
iris[iris$Species="virginica"]
iris[iris$Species = "virginica"]
iris[iris$Species == "virginica"]
iris[virginica]
iris[virginica]clear
iris$Sepal.Length[iris$Species="virginica"]
class(iris)
iris[iris$Species = "virginica"]
iris[iris$Species = "virginica",]
iris[iris$Species like "virginica"]
iris[iris$Species]
?split
split(iris, iris$Species)
lapply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species)$Sepal.Length, mean)
x<-lapply(split(iris, iris$Species)$Sepal.Length, mean)
View(x)
x<-sapply(split(iris, iris$Species), mean)
x<-sapply(split(iris, iris$Species)$Sepal.Length, mean)
View(x)
groups <- split(iris, iris$Species)
view(groups)
View(groups)
View(groups)
groups$virginica
mean(groups$virginica$Petal.Length)
?round
round(mean(groups$virginica$Petal.Length))
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:5], 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 2, mean)
data("mtcars")
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x<- tapply(mtcars$mpg, mtcars$cyl, mean)
x
x[1]
x[1] - x[3]
x<- tapply(mtcars$hp, mtcars$cyl, mean)
x[1] - x[3]
abs(x[1] - x[3])
round(abs(x[1] - x[3]))
debug(ls)
ls
debug(ls)
ls
ls
ls
ls
ls
ls
apply(iris[, 1:4], 2, mean)
apply(split(iris[, 1:4], iris$Species, 2, mean)
Q
ls
apply(split(iris[, 1:4], iris$Species, 2, mean)
x
apply(split(iris[, 1:4], iris$Species, 2, mean)
V
apply(split(iris[, 1:4], iris$Species), 2, mean)
apply(split(iris[, 1:4], iris$Species), 2, mean)
c
debug(ls)
Q
undebug(ls)
c
undebug(ls)
library(datasets)
data("iris")
apply(iris[, 1:4], 2, mean)
apply(split(iris[, 1:4], iris$Species), 2, mean)
apply(split(iris, iris$Species)[, 1:4], 2, mean)
split(iris, iris$Species)
list <- split(iris, iris$Species)
list$virginica
mean(list$virginica$Sepal.Length)
round(mean(list$virginica$Sepal.Length))
apply(iris[, 1:4], 2, mean)
data("mtcars")
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
round(abs(x[1]-x[3]))
tapply(iris$Sepal.Length, iris$Species, mean)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, reange)
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals, length)
unique_vals<-aapply(flags,unique)
unique_vals<-sapply(flags,unique)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, FUN.VALUE = numeric(1), ...)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, FUN.VALUE = character(1))
?tapply
flags$landmass
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
getwd()
setwd("C:\\Users\\jibar\\Documents\\Coursera\\DataScienceTrack\\datasciencecoursera\\02-03\\ProgrammingAssignment2")
source("cachematrix.R")
y<-
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)  m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean
ok)()
View(set)
source("cachematrix.R")
y <- matrix(1:2,1:2)
y
y <- matrix(1:2,1:2, 1:2)
y
y <- matrix()
y
y[,1] <- 1:10
y[,1] <- 1:2
y <- matrix (10, 10)
y
y <- matrix (10)
y
y <- matrix (c(1:10),c(1:10))
y
y <- matrix()
y
y <- matrix(1:10, nrow = 10, ncol = 10)
y
y <- matrix(randu, nrow = 10, ncol = 10)
y <- matrix(rnorm(10), nrow = 10, ncol = 10)
y
View(y)
View(y)
makeCacheMatrix(Y)
makeCacheMatrix(y)
makeCacheMatrix()
cacheSolve(y)
cacheSolve()
cacheSolve(y)
source("cachematrix.r")
source("cachematrix.r")
makeVector()
vect <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
vect
makeVector(vect)
cacheMean(vect)
cacheMean(makeVector(),vect )
cacheMean(makeVector(),vect)
x <- makeVector()
x
source("cachematrix.r")
calcmean(vect)
source("cachematrix.r")
aVect <- makeVector(vect)
aVect$get()
aVect$getmean()
aVect$set(30:40)
aVect$get()
cacheMean(aVect)
aVect$getmean
aVect$getmean()
cacheMean(aVect)
aVect
View(aVect)
View(aVect)
source("cachematrix.r")
aMatrix <- makeCacheMatrix(matrix(1:10, nrow = 5, ncol = 5))
aMatrix$get()
aMatrix$getsolve()
aMatrix$set(matrix(rnorm(10), nrow = 5, ncol = 5)
)
aMatrix$get()
aMatrix$getsolve()
cacheSolve(aMatrix)
aMatrix$set(matrix(0:1, nrow = 2, ncol = 2))
cacheSolve(aMatrix)
aMatrix$get()
aMatrix$set(matrix(0:1, ncol = 2, nrow = 2))
aMatrix$get()
aMatrix$set(matrix(1, ncol = 2, nrow = 2))
aMatrix$get()
cacheSolve(aMatrix)
?solve
aMatrix$set(matrix(c(1,2,3,4),2,2))
cacheSolve(aMatrix)
aMatrix$get()
source("cachematrix.r")
aMatrix <- makeCacheMatrix(matrix(c(1,2,3,4),2,2))
aMatrix$get()
aMatrix$getsolve()
cacheSolve(aMatrix)
cacheSolve(aMatrix)
source("cachematrix.r")
cacheSolve(aMatrix)
source("cachematrix.r")
aMatrix <- makeCacheMatrix(matrix(c(1,2,3,5),2,2))
cacheSolve(aMatrix)
cacheSolve(aMatrix)
